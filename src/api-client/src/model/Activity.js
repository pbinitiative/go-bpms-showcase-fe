/**
 * BPMN Engine OpenAPI
 * REST API for lib-bpmn-engine
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Activity model module.
 * @module model/Activity
 * @version 0.1.0
 */
class Activity {
    /**
     * Constructs a new <code>Activity</code>.
     * @alias module:model/Activity
     */
    constructor() { 
        
        Activity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Activity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Activity} obj Optional instance to populate.
     * @return {module:model/Activity} The populated <code>Activity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Activity();

            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('processInstanceKey')) {
                obj['processInstanceKey'] = ApiClient.convertToType(data['processInstanceKey'], 'String');
            }
            if (data.hasOwnProperty('processDefinitionKey')) {
                obj['processDefinitionKey'] = ApiClient.convertToType(data['processDefinitionKey'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('elementId')) {
                obj['elementId'] = ApiClient.convertToType(data['elementId'], 'String');
            }
            if (data.hasOwnProperty('bpmnElementType')) {
                obj['bpmnElementType'] = ApiClient.convertToType(data['bpmnElementType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Activity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Activity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['processInstanceKey'] && !(typeof data['processInstanceKey'] === 'string' || data['processInstanceKey'] instanceof String)) {
            throw new Error("Expected the field `processInstanceKey` to be a primitive type in the JSON string but got " + data['processInstanceKey']);
        }
        // ensure the json data is a string
        if (data['processDefinitionKey'] && !(typeof data['processDefinitionKey'] === 'string' || data['processDefinitionKey'] instanceof String)) {
            throw new Error("Expected the field `processDefinitionKey` to be a primitive type in the JSON string but got " + data['processDefinitionKey']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['elementId'] && !(typeof data['elementId'] === 'string' || data['elementId'] instanceof String)) {
            throw new Error("Expected the field `elementId` to be a primitive type in the JSON string but got " + data['elementId']);
        }
        // ensure the json data is a string
        if (data['bpmnElementType'] && !(typeof data['bpmnElementType'] === 'string' || data['bpmnElementType'] instanceof String)) {
            throw new Error("Expected the field `bpmnElementType` to be a primitive type in the JSON string but got " + data['bpmnElementType']);
        }

        return true;
    }


}



/**
 * @member {String} key
 */
Activity.prototype['key'] = undefined;

/**
 * @member {String} processInstanceKey
 */
Activity.prototype['processInstanceKey'] = undefined;

/**
 * @member {String} processDefinitionKey
 */
Activity.prototype['processDefinitionKey'] = undefined;

/**
 * @member {Date} createdAt
 */
Activity.prototype['createdAt'] = undefined;

/**
 * @member {String} state
 */
Activity.prototype['state'] = undefined;

/**
 * @member {String} elementId
 */
Activity.prototype['elementId'] = undefined;

/**
 * @member {String} bpmnElementType
 */
Activity.prototype['bpmnElementType'] = undefined;






export default Activity;

