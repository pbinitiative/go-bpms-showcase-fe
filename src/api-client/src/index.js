/**
 * BPMN Engine OpenAPI
 * REST API for lib-bpmn-engine
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Activity from './model/Activity';
import ActivityPage from './model/ActivityPage';
import CompleteJobRequest from './model/CompleteJobRequest';
import CreateProcessDefinition200Response from './model/CreateProcessDefinition200Response';
import CreateProcessInstanceRequest from './model/CreateProcessInstanceRequest';
import GetProcessInstances200Response from './model/GetProcessInstances200Response';
import Job from './model/Job';
import JobPage from './model/JobPage';
import PageMetadata from './model/PageMetadata';
import ProcessDefinitionDetail from './model/ProcessDefinitionDetail';
import ProcessDefinitionSimple from './model/ProcessDefinitionSimple';
import ProcessDefinitionsPage from './model/ProcessDefinitionsPage';
import ProcessInstance from './model/ProcessInstance';
import ProcessInstancePage from './model/ProcessInstancePage';
import JobsApi from './api/JobsApi';
import ProcessDefinitionsApi from './api/ProcessDefinitionsApi';
import ProcessInstancesApi from './api/ProcessInstancesApi';


/**
* REST API for lib-bpmn-engine.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var BpmnEngineOpenApi = require('index'); // See note below*.
* var xxxSvc = new BpmnEngineOpenApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new BpmnEngineOpenApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new BpmnEngineOpenApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new BpmnEngineOpenApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 0.1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Activity model constructor.
     * @property {module:model/Activity}
     */
    Activity,

    /**
     * The ActivityPage model constructor.
     * @property {module:model/ActivityPage}
     */
    ActivityPage,

    /**
     * The CompleteJobRequest model constructor.
     * @property {module:model/CompleteJobRequest}
     */
    CompleteJobRequest,

    /**
     * The CreateProcessDefinition200Response model constructor.
     * @property {module:model/CreateProcessDefinition200Response}
     */
    CreateProcessDefinition200Response,

    /**
     * The CreateProcessInstanceRequest model constructor.
     * @property {module:model/CreateProcessInstanceRequest}
     */
    CreateProcessInstanceRequest,

    /**
     * The GetProcessInstances200Response model constructor.
     * @property {module:model/GetProcessInstances200Response}
     */
    GetProcessInstances200Response,

    /**
     * The Job model constructor.
     * @property {module:model/Job}
     */
    Job,

    /**
     * The JobPage model constructor.
     * @property {module:model/JobPage}
     */
    JobPage,

    /**
     * The PageMetadata model constructor.
     * @property {module:model/PageMetadata}
     */
    PageMetadata,

    /**
     * The ProcessDefinitionDetail model constructor.
     * @property {module:model/ProcessDefinitionDetail}
     */
    ProcessDefinitionDetail,

    /**
     * The ProcessDefinitionSimple model constructor.
     * @property {module:model/ProcessDefinitionSimple}
     */
    ProcessDefinitionSimple,

    /**
     * The ProcessDefinitionsPage model constructor.
     * @property {module:model/ProcessDefinitionsPage}
     */
    ProcessDefinitionsPage,

    /**
     * The ProcessInstance model constructor.
     * @property {module:model/ProcessInstance}
     */
    ProcessInstance,

    /**
     * The ProcessInstancePage model constructor.
     * @property {module:model/ProcessInstancePage}
     */
    ProcessInstancePage,

    /**
    * The JobsApi service constructor.
    * @property {module:api/JobsApi}
    */
    JobsApi,

    /**
    * The ProcessDefinitionsApi service constructor.
    * @property {module:api/ProcessDefinitionsApi}
    */
    ProcessDefinitionsApi,

    /**
    * The ProcessInstancesApi service constructor.
    * @property {module:api/ProcessInstancesApi}
    */
    ProcessInstancesApi
};
