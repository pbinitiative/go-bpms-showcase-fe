/* tslint:disable */
/* eslint-disable */
/**
 * BPMN Engine OpenAPI
 * REST API for lib-bpmn-engine
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Activity
 */
export interface Activity {
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'processInstanceKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'processDefinitionKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'elementId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'bpmnElementType'?: string;
}
/**
 * 
 * @export
 * @interface ActivityPage
 */
export interface ActivityPage {
    /**
     * 
     * @type {number}
     * @memberof ActivityPage
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ActivityPage
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof ActivityPage
     */
    'count'?: number;
    /**
     * 
     * @type {Array<Activity>}
     * @memberof ActivityPage
     */
    'items'?: Array<Activity>;
}
/**
 * 
 * @export
 * @interface CompleteJobRequest
 */
export interface CompleteJobRequest {
    /**
     * 
     * @type {number}
     * @memberof CompleteJobRequest
     */
    'jobKey': number;
}
/**
 * 
 * @export
 * @interface CreateProcessDefinition200Response
 */
export interface CreateProcessDefinition200Response {
    /**
     * 
     * @type {string}
     * @memberof CreateProcessDefinition200Response
     */
    'processDefinitionKey'?: string;
}
/**
 * 
 * @export
 * @interface CreateProcessInstanceRequest
 */
export interface CreateProcessInstanceRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateProcessInstanceRequest
     */
    'processDefinitionKey': string;
    /**
     * 
     * @type {object}
     * @memberof CreateProcessInstanceRequest
     */
    'variables'?: object;
}
/**
 * 
 * @export
 * @interface GetProcessInstances200Response
 */
export interface GetProcessInstances200Response {
    /**
     * 
     * @type {number}
     * @memberof GetProcessInstances200Response
     */
    'total'?: number;
    /**
     * 
     * @type {Array<ProcessInstancePage>}
     * @memberof GetProcessInstances200Response
     */
    'processInstances'?: Array<ProcessInstancePage>;
}
/**
 * 
 * @export
 * @interface Job
 */
export interface Job {
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'elementId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'elementInstanceKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'processInstanceKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface JobPage
 */
export interface JobPage {
    /**
     * 
     * @type {number}
     * @memberof JobPage
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof JobPage
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof JobPage
     */
    'count'?: number;
    /**
     * 
     * @type {Array<Job>}
     * @memberof JobPage
     */
    'items'?: Array<Job>;
}
/**
 * 
 * @export
 * @interface PageMetadata
 */
export interface PageMetadata {
    /**
     * 
     * @type {number}
     * @memberof PageMetadata
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMetadata
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMetadata
     */
    'count'?: number;
}
/**
 * 
 * @export
 * @interface ProcessDefinitionDetail
 */
export interface ProcessDefinitionDetail {
    /**
     * 
     * @type {string}
     * @memberof ProcessDefinitionDetail
     */
    'key'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProcessDefinitionDetail
     */
    'version'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProcessDefinitionDetail
     */
    'bpmnProcessId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessDefinitionDetail
     */
    'bpmnData'?: string;
}
/**
 * 
 * @export
 * @interface ProcessDefinitionSimple
 */
export interface ProcessDefinitionSimple {
    /**
     * 
     * @type {string}
     * @memberof ProcessDefinitionSimple
     */
    'key'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProcessDefinitionSimple
     */
    'version'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProcessDefinitionSimple
     */
    'bpmnProcessId'?: string;
}
/**
 * 
 * @export
 * @interface ProcessDefinitionsPage
 */
export interface ProcessDefinitionsPage {
    /**
     * 
     * @type {number}
     * @memberof ProcessDefinitionsPage
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProcessDefinitionsPage
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProcessDefinitionsPage
     */
    'count'?: number;
    /**
     * 
     * @type {Array<ProcessDefinitionSimple>}
     * @memberof ProcessDefinitionsPage
     */
    'items'?: Array<ProcessDefinitionSimple>;
}
/**
 * 
 * @export
 * @interface ProcessInstance
 */
export interface ProcessInstance {
    /**
     * 
     * @type {string}
     * @memberof ProcessInstance
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessInstance
     */
    'processDefinitionKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessInstance
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessInstance
     */
    'state'?: ProcessInstanceStateEnum;
    /**
     * 
     * @type {string}
     * @memberof ProcessInstance
     */
    'variableHolder'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessInstance
     */
    'caughtEvents'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessInstance
     */
    'activities'?: string;
}

export const ProcessInstanceStateEnum = {
    Active: 'active',
    Completed: 'completed',
    Terminated: 'terminated'
} as const;

export type ProcessInstanceStateEnum = typeof ProcessInstanceStateEnum[keyof typeof ProcessInstanceStateEnum];

/**
 * 
 * @export
 * @interface ProcessInstancePage
 */
export interface ProcessInstancePage {
    /**
     * 
     * @type {number}
     * @memberof ProcessInstancePage
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProcessInstancePage
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProcessInstancePage
     */
    'count'?: number;
    /**
     * 
     * @type {Array<ProcessInstance>}
     * @memberof ProcessInstancePage
     */
    'items'?: Array<ProcessInstance>;
}

/**
 * JobsApi - axios parameter creator
 * @export
 */
export const JobsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Complete a job
         * @param {CompleteJobRequest} completeJobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeJob: async (completeJobRequest: CompleteJobRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'completeJobRequest' is not null or undefined
            assertParamExists('completeJob', 'completeJobRequest', completeJobRequest)
            const localVarPath = `/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(completeJobRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobsApi - functional programming interface
 * @export
 */
export const JobsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Complete a job
         * @param {CompleteJobRequest} completeJobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeJob(completeJobRequest: CompleteJobRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeJob(completeJobRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobsApi.completeJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * JobsApi - factory interface
 * @export
 */
export const JobsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobsApiFp(configuration)
    return {
        /**
         * 
         * @summary Complete a job
         * @param {CompleteJobRequest} completeJobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeJob(completeJobRequest: CompleteJobRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.completeJob(completeJobRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobsApi - object-oriented interface
 * @export
 * @class JobsApi
 * @extends {BaseAPI}
 */
export class JobsApi extends BaseAPI {
    /**
     * 
     * @summary Complete a job
     * @param {CompleteJobRequest} completeJobRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public completeJob(completeJobRequest: CompleteJobRequest, options?: RawAxiosRequestConfig) {
        return JobsApiFp(this.configuration).completeJob(completeJobRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProcessDefinitionsApi - axios parameter creator
 * @export
 */
export const ProcessDefinitionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deploy a new process definition
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProcessDefinition: async (body: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createProcessDefinition', 'body', body)
            const localVarPath = `/process-definitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get process definition
         * @param {number} processDefinitionKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessDefinition: async (processDefinitionKey: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'processDefinitionKey' is not null or undefined
            assertParamExists('getProcessDefinition', 'processDefinitionKey', processDefinitionKey)
            const localVarPath = `/process-definitions/{processDefinitionKey}`
                .replace(`{${"processDefinitionKey"}}`, encodeURIComponent(String(processDefinitionKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of process definitions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessDefinitions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/process-definitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProcessDefinitionsApi - functional programming interface
 * @export
 */
export const ProcessDefinitionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProcessDefinitionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deploy a new process definition
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProcessDefinition(body: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateProcessDefinition200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProcessDefinition(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessDefinitionsApi.createProcessDefinition']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get process definition
         * @param {number} processDefinitionKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessDefinition(processDefinitionKey: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessDefinitionDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProcessDefinition(processDefinitionKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessDefinitionsApi.getProcessDefinition']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get list of process definitions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessDefinitions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessDefinitionsPage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProcessDefinitions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessDefinitionsApi.getProcessDefinitions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProcessDefinitionsApi - factory interface
 * @export
 */
export const ProcessDefinitionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProcessDefinitionsApiFp(configuration)
    return {
        /**
         * 
         * @summary Deploy a new process definition
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProcessDefinition(body: string, options?: RawAxiosRequestConfig): AxiosPromise<CreateProcessDefinition200Response> {
            return localVarFp.createProcessDefinition(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get process definition
         * @param {number} processDefinitionKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessDefinition(processDefinitionKey: number, options?: RawAxiosRequestConfig): AxiosPromise<ProcessDefinitionDetail> {
            return localVarFp.getProcessDefinition(processDefinitionKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of process definitions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessDefinitions(options?: RawAxiosRequestConfig): AxiosPromise<ProcessDefinitionsPage> {
            return localVarFp.getProcessDefinitions(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProcessDefinitionsApi - object-oriented interface
 * @export
 * @class ProcessDefinitionsApi
 * @extends {BaseAPI}
 */
export class ProcessDefinitionsApi extends BaseAPI {
    /**
     * 
     * @summary Deploy a new process definition
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessDefinitionsApi
     */
    public createProcessDefinition(body: string, options?: RawAxiosRequestConfig) {
        return ProcessDefinitionsApiFp(this.configuration).createProcessDefinition(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get process definition
     * @param {number} processDefinitionKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessDefinitionsApi
     */
    public getProcessDefinition(processDefinitionKey: number, options?: RawAxiosRequestConfig) {
        return ProcessDefinitionsApiFp(this.configuration).getProcessDefinition(processDefinitionKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of process definitions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessDefinitionsApi
     */
    public getProcessDefinitions(options?: RawAxiosRequestConfig) {
        return ProcessDefinitionsApiFp(this.configuration).getProcessDefinitions(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProcessInstancesApi - axios parameter creator
 * @export
 */
export const ProcessInstancesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new process instance
         * @param {CreateProcessInstanceRequest} createProcessInstanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProcessInstance: async (createProcessInstanceRequest: CreateProcessInstanceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProcessInstanceRequest' is not null or undefined
            assertParamExists('createProcessInstance', 'createProcessInstanceRequest', createProcessInstanceRequest)
            const localVarPath = `/process-instances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProcessInstanceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of activities for a process instance
         * @param {number} processInstanceKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivities: async (processInstanceKey: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'processInstanceKey' is not null or undefined
            assertParamExists('getActivities', 'processInstanceKey', processInstanceKey)
            const localVarPath = `/process-instances/{processInstanceKey}/activities`
                .replace(`{${"processInstanceKey"}}`, encodeURIComponent(String(processInstanceKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of jobs for a process instance
         * @param {number} processInstanceKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobs: async (processInstanceKey: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'processInstanceKey' is not null or undefined
            assertParamExists('getJobs', 'processInstanceKey', processInstanceKey)
            const localVarPath = `/process-instances/{processInstanceKey}/jobs`
                .replace(`{${"processInstanceKey"}}`, encodeURIComponent(String(processInstanceKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get state of a process instance selected by processInstanceId
         * @param {number} processInstanceKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessInstance: async (processInstanceKey: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'processInstanceKey' is not null or undefined
            assertParamExists('getProcessInstance', 'processInstanceKey', processInstanceKey)
            const localVarPath = `/process-instances/{processInstanceKey}`
                .replace(`{${"processInstanceKey"}}`, encodeURIComponent(String(processInstanceKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of running process instances
         * @param {number} [processDefinitionKey] 
         * @param {number} [offset] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessInstances: async (processDefinitionKey?: number, offset?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/process-instances/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (processDefinitionKey !== undefined) {
                localVarQueryParameter['processDefinitionKey'] = processDefinitionKey;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProcessInstancesApi - functional programming interface
 * @export
 */
export const ProcessInstancesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProcessInstancesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new process instance
         * @param {CreateProcessInstanceRequest} createProcessInstanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProcessInstance(createProcessInstanceRequest: CreateProcessInstanceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessInstance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProcessInstance(createProcessInstanceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessInstancesApi.createProcessInstance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get list of activities for a process instance
         * @param {number} processInstanceKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActivities(processInstanceKey: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActivityPage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActivities(processInstanceKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessInstancesApi.getActivities']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get list of jobs for a process instance
         * @param {number} processInstanceKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobs(processInstanceKey: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobPage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobs(processInstanceKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessInstancesApi.getJobs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get state of a process instance selected by processInstanceId
         * @param {number} processInstanceKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessInstance(processInstanceKey: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessInstance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProcessInstance(processInstanceKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessInstancesApi.getProcessInstance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get list of running process instances
         * @param {number} [processDefinitionKey] 
         * @param {number} [offset] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessInstances(processDefinitionKey?: number, offset?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProcessInstances200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProcessInstances(processDefinitionKey, offset, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessInstancesApi.getProcessInstances']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProcessInstancesApi - factory interface
 * @export
 */
export const ProcessInstancesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProcessInstancesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new process instance
         * @param {CreateProcessInstanceRequest} createProcessInstanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProcessInstance(createProcessInstanceRequest: CreateProcessInstanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProcessInstance> {
            return localVarFp.createProcessInstance(createProcessInstanceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of activities for a process instance
         * @param {number} processInstanceKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivities(processInstanceKey: number, options?: RawAxiosRequestConfig): AxiosPromise<ActivityPage> {
            return localVarFp.getActivities(processInstanceKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of jobs for a process instance
         * @param {number} processInstanceKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobs(processInstanceKey: number, options?: RawAxiosRequestConfig): AxiosPromise<JobPage> {
            return localVarFp.getJobs(processInstanceKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get state of a process instance selected by processInstanceId
         * @param {number} processInstanceKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessInstance(processInstanceKey: number, options?: RawAxiosRequestConfig): AxiosPromise<ProcessInstance> {
            return localVarFp.getProcessInstance(processInstanceKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of running process instances
         * @param {number} [processDefinitionKey] 
         * @param {number} [offset] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessInstances(processDefinitionKey?: number, offset?: number, size?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetProcessInstances200Response> {
            return localVarFp.getProcessInstances(processDefinitionKey, offset, size, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProcessInstancesApi - object-oriented interface
 * @export
 * @class ProcessInstancesApi
 * @extends {BaseAPI}
 */
export class ProcessInstancesApi extends BaseAPI {
    /**
     * 
     * @summary Create a new process instance
     * @param {CreateProcessInstanceRequest} createProcessInstanceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstancesApi
     */
    public createProcessInstance(createProcessInstanceRequest: CreateProcessInstanceRequest, options?: RawAxiosRequestConfig) {
        return ProcessInstancesApiFp(this.configuration).createProcessInstance(createProcessInstanceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of activities for a process instance
     * @param {number} processInstanceKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstancesApi
     */
    public getActivities(processInstanceKey: number, options?: RawAxiosRequestConfig) {
        return ProcessInstancesApiFp(this.configuration).getActivities(processInstanceKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of jobs for a process instance
     * @param {number} processInstanceKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstancesApi
     */
    public getJobs(processInstanceKey: number, options?: RawAxiosRequestConfig) {
        return ProcessInstancesApiFp(this.configuration).getJobs(processInstanceKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get state of a process instance selected by processInstanceId
     * @param {number} processInstanceKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstancesApi
     */
    public getProcessInstance(processInstanceKey: number, options?: RawAxiosRequestConfig) {
        return ProcessInstancesApiFp(this.configuration).getProcessInstance(processInstanceKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of running process instances
     * @param {number} [processDefinitionKey] 
     * @param {number} [offset] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessInstancesApi
     */
    public getProcessInstances(processDefinitionKey?: number, offset?: number, size?: number, options?: RawAxiosRequestConfig) {
        return ProcessInstancesApiFp(this.configuration).getProcessInstances(processDefinitionKey, offset, size, options).then((request) => request(this.axios, this.basePath));
    }
}



